{"name": "Test User Registration", "status": "failed", "statusDetails": {"message": "AssertionError: Expected status code 200, got 404\nassert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "@allure.title(\"Test User Registration\")\n    @allure.description(\"\"\"\n        Verifies that a new user can successfully register.\n        This test sends a POST request to the user registration endpoint with a new user's details\n        (name, email, password) and expects a successful (200 OK) response, indicating that the\n        user has been registered correctly.\n        \"\"\")\n    @pytest.mark.auth\n    @pytest.mark.registration\n    def test_user_registration():\n        registration_data = {\n            'name': 'pytest_example',\n            'email': 'pytest_example@test.com',\n            'password': 'test'\n        }\n    \n        registration_response = requests.post(f'{auth_api_endpoint}/user/registration', json=registration_data)\n>       assert registration_response.status_code == 200 ,f\"Expected status code 200, got {registration_response.status_code}\"\nE       AssertionError: Expected status code 200, got 404\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntest_jwt.py:24: AssertionError"}, "description": "\n    Verifies that a new user can successfully register.\n    This test sends a POST request to the user registration endpoint with a new user's details \n    (name, email, password) and expects a successful (200 OK) response, indicating that the \n    user has been registered correctly.\n    ", "start": 1705608370958, "stop": 1705608370966, "uuid": "61c31d99-ef27-44b6-9ca6-a2b69b89e3da", "historyId": "aefedba32b585e77fa1da4be845f658a", "testCaseId": "aefedba32b585e77fa1da4be845f658a", "fullName": "test_jwt#test_user_registration", "labels": [{"name": "tag", "value": "registration"}, {"name": "tag", "value": "auth"}, {"name": "suite", "value": "test_jwt"}, {"name": "host", "value": "hayarpi"}, {"name": "thread", "value": "22226-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_jwt"}]}